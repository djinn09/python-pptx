from typing import Any, Callable, Generic, Type, TypeVar

_T = TypeVar("_T")

class Length(int):
    _EMUS_PER_INCH: int
    _EMUS_PER_CENTIPOINT: int
    _EMUS_PER_CM: int
    _EMUS_PER_MM: int
    _EMUS_PER_PT: int
    def __new__(cls: Type[Length], emu: int) -> Length: ...
    @property
    def inches(self) -> float: ...
    @property
    def centipoints(self) -> int: ...
    @property
    def cm(self) -> float: ...
    @property
    def emu(self) -> int: ...
    @property
    def mm(self) -> float: ...
    @property
    def pt(self) -> float: ...

class Inches(Length):
    def __new__(cls: Type[Inches], inches: float) -> Inches: ...

class Centipoints(Length):
    def __new__(cls: Type[Centipoints], centipoints: int) -> Centipoints: ...

class Cm(Length):
    def __new__(cls: Type[Cm], cm: float) -> Cm: ...

class Emu(Length):
    def __new__(cls: Type[Emu], emu: int) -> Emu: ...

class Mm(Length):
    def __new__(cls: Type[Mm], mm: float) -> Mm: ...

class Pt(Length):
    def __new__(cls: Type[Pt], points: float) -> Pt: ...

class lazyproperty(Generic[_T]):
    def __init__(self, fget: Callable[..., _T]) -> None: ...
    def __get__(self, obj: Any, type: Any = ...) -> _T: ...
    def __set__(self, obj: Any, value: Any) -> None: ...
