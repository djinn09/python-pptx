import enum
from typing import Any, Dict, Type
from typing_extensions import Self

class BaseEnum(int, enum.Enum):
    def __new__(cls: Type[Self], ms_api_value: int, docstr: str) -> Self: ...
    def __str__(self) -> str: ...

class BaseXmlEnum(int, enum.Enum):
    xml_value: str | None
    def __new__(cls: Type[Self], ms_api_value: int, xml_value: str | None, docstr: str) -> Self: ...
    def __str__(self) -> str: ...
    @classmethod
    def from_xml(cls: Type[Self], xml_value: str) -> Self: ...
    @classmethod
    def to_xml(cls: Type[Self], value: int | Self) -> str: ...
    @classmethod
    def validate(cls: Type[Self], value: Self) -> None: ...

class DocsPageFormatter:
    def __init__(self, clsname: str, clsdict: Dict[str, Any]) -> None: ...
    @property
    def page_str(self) -> str: ...
    @property
    def _intro_text(self) -> str: ...
    def _member_def(self, member: BaseEnum | BaseXmlEnum) -> str: ...
    @property
    def _member_defs(self) -> str: ...
    @property
    def _ms_name(self) -> str: ...
    @property
    def _page_title(self) -> str: ...
