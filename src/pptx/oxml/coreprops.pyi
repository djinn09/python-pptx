import datetime as dt
from typing import Optional
from lxml.etree import _Element
from pptx.oxml.xmlchemy import BaseOxmlElement

class CT_CoreProperties(BaseOxmlElement):
    category: Optional[_Element]
    contentStatus: Optional[_Element]
    created: Optional[_Element]
    creator: Optional[_Element]
    description: Optional[_Element]
    identifier: Optional[_Element]
    keywords: Optional[_Element]
    language: Optional[_Element]
    lastModifiedBy: Optional[_Element]
    lastPrinted: Optional[_Element]
    modified: Optional[_Element]
    revision: Optional[_Element]
    subject: Optional[_Element]
    title: Optional[_Element]
    version: Optional[_Element]

    @staticmethod
    def new_coreProperties() -> "CT_CoreProperties": ...
    @property
    def author_text(self) -> str: ...
    @author_text.setter
    def author_text(self, value: str) -> None: ...
    @property
    def category_text(self) -> str: ...
    @category_text.setter
    def category_text(self, value: str) -> None: ...
    @property
    def comments_text(self) -> str: ...
    @comments_text.setter
    def comments_text(self, value: str) -> None: ...
    @property
    def contentStatus_text(self) -> str: ...
    @contentStatus_text.setter
    def contentStatus_text(self, value: str) -> None: ...
    @property
    def created_datetime(self) -> Optional[dt.datetime]: ...
    @created_datetime.setter
    def created_datetime(self, value: dt.datetime) -> None: ...
    @property
    def identifier_text(self) -> str: ...
    @identifier_text.setter
    def identifier_text(self, value: str) -> None: ...
    @property
    def keywords_text(self) -> str: ...
    @keywords_text.setter
    def keywords_text(self, value: str) -> None: ...
    @property
    def language_text(self) -> str: ...
    @language_text.setter
    def language_text(self, value: str) -> None: ...
    @property
    def lastModifiedBy_text(self) -> str: ...
    @lastModifiedBy_text.setter
    def lastModifiedBy_text(self, value: str) -> None: ...
    @property
    def lastPrinted_datetime(self) -> Optional[dt.datetime]: ...
    @lastPrinted_datetime.setter
    def lastPrinted_datetime(self, value: dt.datetime) -> None: ...
    @property
    def modified_datetime(self) -> Optional[dt.datetime]: ...
    @modified_datetime.setter
    def modified_datetime(self, value: dt.datetime) -> None: ...
    @property
    def revision_number(self) -> int: ...
    @revision_number.setter
    def revision_number(self, value: int) -> None: ...
    @property
    def subject_text(self) -> str: ...
    @subject_text.setter
    def subject_text(self, value: str) -> None: ...
    @property
    def title_text(self) -> str: ...
    @title_text.setter
    def title_text(self, value: str) -> None: ...
    @property
    def version_text(self) -> str: ...
    @version_text.setter
    def version_text(self, value: str) -> None: ...
    def _datetime_of_element(self, property_name: str) -> Optional[dt.datetime]: ...
    def _get_or_add(self, prop_name: str) -> _Element: ...
    @classmethod
    def _offset_dt(cls, datetime: dt.datetime, offset_str: str) -> dt.datetime: ...
    @classmethod
    def _parse_W3CDTF_to_datetime(cls, w3cdtf_str: str) -> dt.datetime: ...
    def _set_element_datetime(self, prop_name: str, value: dt.datetime) -> None: ...
    def _set_element_text(self, prop_name: str, value: str) -> None: ...
    def _text_of_element(self, property_name: str) -> str: ...
