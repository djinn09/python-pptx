from typing import Any, Callable, Dict, Iterable, List, Optional, Protocol, Sequence, Type
from lxml.etree import ElementBase, _Element

class AttributeType(Protocol):
    @classmethod
    def from_xml(cls, xml_value: str) -> Any: ...
    @classmethod
    def to_xml(cls, value: Any) -> str: ...

def OxmlElement(nsptag_str: str, nsmap: Optional[Dict[str, str]] = ...) -> "BaseOxmlElement": ...
def serialize_for_reading(element: ElementBase) -> "XmlString": ...

class XmlString(str):
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def _attr_seq(self, attrs: str) -> List[str]: ...
    def _eq_elm_strs(self, line: str, line_2: str) -> bool: ...
    def _parse_line(self, line: str) -> tuple[str, str, str, str]: ...

class MetaOxmlElement(type):
    def __init__(cls, clsname: str, bases: tuple[type, ...], clsdict: Dict[str, Any]) -> None: ...

class BaseAttribute:
    def __init__(self, attr_name: str, simple_type: Type[AttributeType]) -> None: ...
    def populate_class_members(self, element_cls: Type["BaseOxmlElement"], prop_name: str) -> None: ...
    @property
    def _clark_name(self) -> str: ...
    @property
    def _getter(self) -> Callable[["BaseOxmlElement"], Any]: ...
    @property
    def _setter(self) -> Callable[["BaseOxmlElement", Any], None]: ...

class OptionalAttribute(BaseAttribute):
    def __init__(self, attr_name: str, simple_type: Type[AttributeType], default: Any = ...) -> None: ...
    @property
    def _docstring(self) -> str: ...
    @property
    def _getter(self) -> Callable[["BaseOxmlElement"], Any]: ...
    @property
    def _setter(self) -> Callable[["BaseOxmlElement", Any], None]: ...

class RequiredAttribute(BaseAttribute):
    @property
    def _getter(self) -> Callable[["BaseOxmlElement"], Any]: ...
    @property
    def _docstring(self) -> str: ...
    @property
    def _setter(self) -> Callable[["BaseOxmlElement", Any], None]: ...

class _BaseChildElement:
    def __init__(self, nsptagname: str, successors: Sequence[str] = ...) -> None: ...
    def populate_class_members(self, element_cls: Type["BaseOxmlElement"], prop_name: str) -> None: ...
    def _add_adder(self) -> None: ...
    def _add_creator(self) -> None: ...
    def _add_getter(self) -> None: ...
    def _add_inserter(self) -> None: ...
    def _add_list_getter(self) -> None: ...
    @property
    def _add_method_name(self) -> str: ...
    def _add_to_class(self, name: str, method: Callable[..., Any]) -> None: ...
    @property
    def _creator(self) -> Callable[["BaseOxmlElement"], "BaseOxmlElement"]: ...
    @property
    def _getter(self) -> Callable[["BaseOxmlElement"], Optional["BaseOxmlElement"]]: ...
    @property
    def _insert_method_name(self) -> str: ...
    @property
    def _list_getter(self) -> Callable[["BaseOxmlElement"], List["BaseOxmlElement"]]: ...
    @property
    def _remove_method_name(self) -> str: ...
    @property
    def _new_method_name(self) -> str: ...

class Choice(_BaseChildElement):
    @property
    def nsptagname(self) -> str: ...
    def populate_class_members(self, element_cls: Type["BaseOxmlElement"], group_prop_name: str, successors: Sequence[str]) -> None: ...
    def _add_get_or_change_to_method(self) -> None: ...
    @property
    def _prop_name(self) -> str: ...
    @property
    def _get_or_change_to_method_name(self) -> str: ...
    @property
    def _remove_group_method_name(self) -> str: ...

class OneAndOnlyOne(_BaseChildElement):
    def __init__(self, nsptagname: str) -> None: ...
    def populate_class_members(self, element_cls: Type["BaseOxmlElement"], prop_name: str) -> None: ...
    @property
    def _getter(self) -> Callable[["BaseOxmlElement"], "BaseOxmlElement"]: ...

class OneOrMore(_BaseChildElement):
    def populate_class_members(self, element_cls: Type["BaseOxmlElement"], prop_name: str) -> None: ...
    def _add_public_adder(self) -> None: ...
    @property
    def _public_add_method_name(self) -> str: ...

class ZeroOrMore(_BaseChildElement):
    def populate_class_members(self, element_cls: Type["BaseOxmlElement"], prop_name: str) -> None: ...

class ZeroOrOne(_BaseChildElement):
    def populate_class_members(self, element_cls: Type["BaseOxmlElement"], prop_name: str) -> None: ...
    def _add_get_or_adder(self) -> None: ...
    def _add_remover(self) -> None: ...
    @property
    def _get_or_add_method_name(self) -> str: ...

class ZeroOrOneChoice(_BaseChildElement):
    def __init__(self, choices: Iterable[Choice], successors: Iterable[str] = ...) -> None: ...
    def populate_class_members(self, element_cls: Type["BaseOxmlElement"], prop_name: str) -> None: ...
    def _add_choice_getter(self) -> None: ...
    def _add_group_remover(self) -> None: ...
    @property
    def _choice_getter(self) -> Callable[["BaseOxmlElement"], Optional["BaseOxmlElement"]]: ...
    @property
    def _member_nsptagnames(self) -> List[str]: ...
    @property
    def _remove_choice_group_method_name(self) -> str: ...

class BaseOxmlElement(ElementBase, metaclass=MetaOxmlElement):
    def __repr__(self) -> str: ...
    def first_child_found_in(self, *tagnames: str) -> Optional[_Element]: ...
    def insert_element_before(self, elm: ElementBase, *tagnames: str) -> ElementBase: ...
    def remove_all(self, *tagnames: str) -> None: ...
    @property
    def xml(self) -> str: ...
    def xpath(self, xpath_str: str) -> Any: ...
    @property
    def _nsptag(self) -> str: ...
