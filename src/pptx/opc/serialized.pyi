from typing import IO, Any, Container, Dict, Optional, Sequence, Tuple
from typing_extensions import Self

from pptx.opc.oxml import CT_Types
from pptx.opc.package import Part, _Relationships
from pptx.opc.packuri import PackURI

class PackageReader(Container[bytes]):
    def __init__(self, pkg_file: str | IO[bytes]) -> None: ...
    def __contains__(self, pack_uri: object) -> bool: ...
    def __getitem__(self, pack_uri: PackURI) -> bytes: ...
    def rels_xml_for(self, partname: PackURI) -> Optional[bytes]: ...
    @property
    def _blob_reader(self) -> "_PhysPkgReader": ...

class PackageWriter:
    def __init__(self, pkg_file: str | IO[bytes], pkg_rels: _Relationships, parts: Sequence[Part]) -> None: ...
    @classmethod
    def write(cls, pkg_file: str | IO[bytes], pkg_rels: _Relationships, parts: Sequence[Part]) -> None: ...
    def _write(self) -> None: ...
    def _write_content_types_stream(self, phys_writer: "_PhysPkgWriter") -> None: ...
    def _write_parts(self, phys_writer: "_PhysPkgWriter") -> None: ...
    def _write_pkg_rels(self, phys_writer: "_PhysPkgWriter") -> None: ...

class _PhysPkgReader(Container[PackURI]):
    def __contains__(self, item: object) -> bool: ...
    def __getitem__(self, pack_uri: PackURI) -> bytes: ...
    @classmethod
    def factory(cls, pkg_file: str | IO[bytes]) -> "_PhysPkgReader": ...

class _DirPkgReader(_PhysPkgReader):
    def __init__(self, path: str) -> None: ...
    def __contains__(self, pack_uri: object) -> bool: ...
    def __getitem__(self, pack_uri: PackURI) -> bytes: ...

class _ZipPkgReader(_PhysPkgReader):
    def __init__(self, pkg_file: str | IO[bytes]) -> None: ...
    def __contains__(self, pack_uri: object) -> bool: ...
    def __getitem__(self, pack_uri: PackURI) -> bytes: ...
    @property
    def _blobs(self) -> Dict[PackURI, bytes]: ...

class _PhysPkgWriter:
    @classmethod
    def factory(cls, pkg_file: str | IO[bytes]) -> "_ZipPkgWriter": ...
    def write(self, pack_uri: PackURI, blob: bytes) -> None: ...

class _ZipPkgWriter(_PhysPkgWriter):
    def __init__(self, pkg_file: str | IO[bytes]) -> None: ...
    def __enter__(self) -> Self: ...
    def __exit__(self, *exc: list[Any]) -> None: ...
    def write(self, pack_uri: PackURI, blob: bytes) -> None: ...
    @property
    def _zipf(self) -> "zipfile.ZipFile": ...

class _ContentTypesItem:
    def __init__(self, parts: Sequence[Part]) -> None: ...
    @classmethod
    def xml_for(cls, parts: Sequence[Part]) -> CT_Types: ...
    @property
    def _xml(self) -> CT_Types: ...
    @property
    def _defaults_and_overrides(self) -> Tuple[Dict[str, str], Dict[PackURI, str]]: ...
