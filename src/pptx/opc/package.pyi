from typing import IO, Dict, Iterator, Set, Tuple

from pptx.opc.oxml import CT_Relationships
from pptx.opc.packuri import PackURI
from pptx.package import Package
from pptx.parts.presentation import PresentationPart
from typing_extensions import Self

class _RelatableMixin:
    def part_related_by(self, reltype: str) -> "Part": ...
    def relate_to(self, target: "Part" | str, reltype: str, is_external: bool = ...) -> str: ...
    def related_part(self, rId: str) -> "Part": ...
    def target_ref(self, rId: str) -> str: ...
    @property
    def _rels(self) -> "_Relationships": ...

class OpcPackage(_RelatableMixin):
    def __init__(self, pkg_file: str | IO[bytes]) -> None: ...
    @classmethod
    def open(cls, pkg_file: str | IO[bytes]) -> Self: ...
    def drop_rel(self, rId: str) -> None: ...
    def iter_parts(self) -> Iterator["Part"]: ...
    def iter_rels(self) -> Iterator["_Relationship"]: ...
    @property
    def main_document_part(self) -> PresentationPart: ...
    def next_partname(self, tmpl: str) -> PackURI: ...
    def save(self, pkg_file: str | IO[bytes]) -> None: ...
    def _load(self) -> Self: ...
    @property
    def _rels(self) -> "_Relationships": ...

class _PackageLoader:
    def __init__(self, pkg_file: str | IO[bytes], package: Package) -> None: ...
    @classmethod
    def load(cls, pkg_file: str | IO[bytes], package: Package) -> Tuple[CT_Relationships, Dict[PackURI, "Part"]]: ...
    def _load(self) -> Tuple[CT_Relationships, Dict[PackURI, "Part"]]: ...
    @property
    def _content_types(self) -> "_ContentTypeMap": ...
    @property
    def _package_reader(self) -> "PackageReader": ...
    @property
    def _parts(self) -> Dict[PackURI, "Part"]: ...
    @property
    def _xml_rels(self) -> Dict[PackURI, CT_Relationships]: ...
    def _xml_rels_for(self, partname: PackURI) -> CT_Relationships: ...

class Part(_RelatableMixin):
    def __init__(self, partname: PackURI, content_type: str, package: Package, blob: bytes | None = ...) -> None: ...
    @classmethod
    def load(cls, partname: PackURI, content_type: str, package: Package, blob: bytes) -> Self: ...
    @property
    def blob(self) -> bytes: ...
    @blob.setter
    def blob(self, blob: bytes) -> None: ...
    @property
    def content_type(self) -> str: ...
    def load_rels_from_xml(self, xml_rels: CT_Relationships, parts: Dict[PackURI, "Part"]) -> None: ...
    @property
    def package(self) -> Package: ...
    @property
    def partname(self) -> PackURI: ...
    @partname.setter
    def partname(self, partname: PackURI) -> None: ...
    @property
    def rels(self) -> "_Relationships": ...
    def _blob_from_file(self, file: str | IO[bytes]) -> bytes: ...
    @property
    def _rels(self) -> "_Relationships": ...

class XmlPart(Part):
    @property
    def blob(self) -> bytes: ...
    def drop_rel(self, rId: str) -> None: ...
    @property
    def part(self) -> "XmlPart": ...
    def _rel_ref_count(self, rId: str) -> int: ...

class PartFactory:
    part_type_for: Dict[str, type[Part]]
    def __new__(cls, partname: PackURI, content_type: str, package: Package, blob: bytes) -> Part: ...
    @classmethod
    def _part_cls_for(cls, content_type: str) -> type[Part]: ...

class _ContentTypeMap:
    def __init__(self, overrides: Dict[str, str], defaults: Dict[str, str]) -> None: ...
    def __getitem__(self, partname: PackURI) -> str: ...
    @classmethod
    def from_xml(cls, content_types_xml: bytes) -> "_ContentTypeMap": ...

class _Relationships:
    def __init__(self, base_uri: str) -> None: ...
    def __contains__(self, rId: object) -> bool: ...
    def __getitem__(self, rId: str) -> "_Relationship": ...
    def __iter__(self) -> Iterator[str]: ...
    def __len__(self) -> int: ...
    def get_or_add(self, reltype: str, target_part: Part) -> str: ...
    def get_or_add_ext_rel(self, reltype: str, target_ref: str) -> str: ...
    def load_from_xml(self, base_uri: str, xml_rels: CT_Relationships, parts: Dict[PackURI, Part]) -> None: ...
    def part_with_reltype(self, reltype: str) -> Part: ...
    def pop(self, rId: str) -> "_Relationship": ...
    @property
    def xml(self) -> bytes: ...
    def _add_relationship(self, reltype: str, target: Part | str, is_external: bool = ...) -> str: ...
    def _get_matching(self, reltype: str, target: Part | str, is_external: bool = ...) -> str | None: ...
    @property
    def _next_rId(self) -> str: ...
    @property
    def _rels(self) -> Dict[str, "_Relationship"]: ...
    @property
    def _rels_by_reltype(self) -> Dict[str, list["_Relationship"]]: ...

class _Relationship:
    def __init__(self, base_uri: str, rId: str, reltype: str, target_mode: str, target: Part | str) -> None: ...
    @classmethod
    def from_xml(cls, base_uri: str, rel: CT_Relationships, parts: Dict[PackURI, Part]) -> "_Relationship": ...
    @property
    def is_external(self) -> bool: ...
    @property
    def reltype(self) -> str: ...
    @property
    def rId(self) -> str: ...
    @property
    def target_part(self) -> Part: ...
    @property
    def target_partname(self) -> PackURI: ...
    @property
    def target_ref(self) -> str: ...
